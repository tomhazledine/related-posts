{
    "2017-02-15-svg-markup": {
        "relativePath": "2017-02-15-svg-markup",
        "hash": "9251ce4858ef31fe08601f7a4d6575cc1fa3edf00800334e318ef09e57720851",
        "summary": "Getting to grips with SVGs can be hindsight, given their complexity. However, their complexity is what adds to their strengths. An SVG, in comparison to a raster PNG, can maintain its quality at varying scales, while a PNG will need a separate file for each size, increasing both HTTP requests and overall page-weight.\n\nSVG, standing for Scalable Vector Graphic, uses an XML-derived language. Its main components in making shapes include `<svg>`, `<path/>`, `<circle/>` and `<rect/>` (rectangle) tags. An SVG functions much like an HTML language and can include classes in the tags. These classes can then be manipulated using CSS for further control over positioning and for adding transitions and animations. This gives more precision and a defined, predictable co-ordinate system to work with, eliminating the need for muddled alignments. \n\nWhether it's creating loading graphics or more complex designs, the magic that can be crafted using SVGs is limitless, only bound by a designer's creativity. Learning to understand and harness the language of SVGs, Kan lead to the creation of stunning designs.",
        "similarities": [
            {
                "relativePath": "2017-02-26-inline-svg-icon-sprites",
                "permalink": "/inline-svg-icon-sprites/",
                "date": "2017-02-26",
                "tags": "articles",
                "categories": [
                    "code"
                ],
                "title": "Inline SVG icon sprites are (still) not scary.",
                "excerpt": "One of the best things about HTML is that it just works. As with much of the web, things only get weird when designers and developers start adding things.",
                "summary": [
                    "This is similar to what you've just read because it extends the discussion on the usage of SVGs, focusing specifically on SVG icon sprites, their advantages, and methods of automation, which could be beneficial to those seeking practical applications of SVGs in web development."
                ],
                "score": 0.8274244838656473
            },
            {
                "relativePath": "2021-07-21-line-graphs-with-react-svg-d3",
                "permalink": "/line-graphs-with-react-svg-d3/",
                "date": "2021-07-21",
                "tags": [
                    "articles",
                    "featured",
                    "intro"
                ],
                "categories": [
                    "audio",
                    "code"
                ],
                "title": "Line graphs with React and D3.js",
                "excerpt": "Generating a dynamic SVG visualisation of audio frequency data.",
                "summary": [
                    "This is similar to what you've just read because it also explores the practical use of SVGs, this time in creating dynamic line graphs with React and D3.js, providing an extension to your knowledge on how SVGs can be manipulated for creating sophisticated designs."
                ],
                "score": 0.6923887733217269
            }
        ]
    },
    "2017-02-26-inline-svg-icon-sprites": {
        "relativePath": "2017-02-26-inline-svg-icon-sprites",
        "hash": "431bf52c37d7f49984079647ffdce92b1f05a4c7fcf229c95d496c12f865a2a5",
        "summary": "SVG icon sprites are widely used in high-performance web entities, with vector-based images providing a more optimal solution for icon systems on websites compared to raster formats like JPG and PNG. SVG icon sprites are not complicated, and using them is in fact easy, with the SVG language allowing you to group icon-code blocks into individual files for ease of use. SVG icon sprites can also be automated using a task runner such as Gulp, enabling continuous integration of Javascript and icon assets. This enables the creation of an SVG icon sprite that still provides the best experience for site users, without imposing on developers.",
        "similarities": [
            {
                "relativePath": "2017-02-15-svg-markup",
                "permalink": "/svg-markup/",
                "date": "2017-02-15",
                "tags": [
                    "articles",
                    "popular"
                ],
                "categories": [
                    "code"
                ],
                "title": "Getting to grips with SVG markup",
                "excerpt": "SVGs are complex, for sure, but that very complexity gives them their power. And we don't need to know the intricacies of the co-ordinate system to harness that power.",
                "summary": [
                    "This is similar to what you've just read because it delves deeper into the use of SVGs, expanding on their coding structure and how they can be manipulated for enhanced web design purposes."
                ],
                "score": 0.8274244838656473
            },
            {
                "relativePath": "2021-01-17-adding-rss",
                "permalink": "/adding-rss/",
                "date": "2021-01-17",
                "tags": [
                    "articles"
                ],
                "categories": [
                    "code"
                ],
                "title": "RSS in 2021 (yes, it's still a thing)",
                "excerpt": "Adding an RSS feed to an Eleventy site is (mostly) easy peasy.",
                "summary": [
                    "This is similar to what you've just read because it also explores the technical side of web development, focusing on implementing an RSS feed to a blog, which may be beneficial to those interested in optimizing their own websites or blogs."
                ],
                "score": 0.6628301942654218
            }
        ]
    },
    "2017-03-22-what-is-a-decibel-anyway": {
        "relativePath": "2017-03-22-what-is-a-decibel-anyway",
        "hash": "67a9ac9116be33255173788ce769e036c500148303b5f6cb7b923f1c0dae2796",
        "summary": "In this post, I explore the enigma that is decibel, an auditory measurement unit that has always puzzled me. Initially, it was perplexing to see journalists and sound engineers use 0 decibel as silence and anything over 120 as loud, while audio mixers measured loudest at 0 and silence at about -96 or even approaching infinity. After researching, it became clear that a decibel represents a ratio and not an absolute value, using a logarithmic scale. Therefore, it's an excellent measure for very small and large intensity differences due to its relative and logarithmic nature. When employed to express \"loudness\", such as by journalists, decibels use a fixed reference point. \n\nI also found out that audio mixers use a different measuring system known as dBFS (decibel full scale), where the maximum level of sound is represented as 0 dBFS and all the other levels in negative numbers. This makes sense as the dB scale must have a defined reference point. Even when working with web audio using dBFS, it provides us valuable information about clipping and gain-staging, despite the final volume being regulated by your operating system or speakers. \n\nFollowing my blog's posting and subsequent comments from the Hacker News community, I came to realize that decibels find their application in various fields beyond audio, such as spectrum analysis and other pressure calculations. This fascinating unit of measurement also carries different interpretations when transitioned to the analog audio realm. Evidently, the decibel is a fascinating instrument of measurement, further enlivened by uncanny practices like 'Car Audio SPL Drag Racing' - which sees car owners compete for the highest dB SPL level in their car stereos.\n",
        "similarities": [
            {
                "relativePath": "2020-12-30-web-audio-delay",
                "permalink": "/web-audio-delay/",
                "date": "2020-12-30",
                "tags": [
                    "articles",
                    "featured",
                    "intro"
                ],
                "categories": [
                    "audio",
                    "code"
                ],
                "title": "Building a delay effect with the Web Audio API",
                "excerpt": "An introduction to the power of JavaScript's Web Audio API",
                "summary": [
                    "This is similar to what you've just read because it continues the exploration of audio-based technical topics, transitioning from understanding decibel measurements to application in audio effects using JavaScript's Web Audio API."
                ],
                "score": 0.69394383626566
            },
            {
                "relativePath": "2021-07-21-line-graphs-with-react-svg-d3",
                "permalink": "/line-graphs-with-react-svg-d3/",
                "date": "2021-07-21",
                "tags": [
                    "articles",
                    "featured",
                    "intro"
                ],
                "categories": [
                    "audio",
                    "code"
                ],
                "title": "Line graphs with React and D3.js",
                "excerpt": "Generating a dynamic SVG visualisation of audio frequency data.",
                "summary": [
                    "This is similar to what you've just read because it delves into another technical concept - creating dynamic line graphs with React and D3.js, explaining their intricacies and use, much like the exploration of decibel measurements in the first post."
                ],
                "score": 0.6395557070693944
            }
        ]
    },
    "2017-03-31-echo-alexa-voice-interface-problems": {
        "relativePath": "2017-03-31-echo-alexa-voice-interface-problems",
        "hash": "763662584b8bb31063df1a9c7bbc619b1f89c7d636ce4be89849c185cd36bbeb",
        "summary": "Living with Alexa, Amazon's virtual assistant tucked within the Amazon Echo, for six months has been quite the learning experience. While voice-control interfaces are becoming increasingly popular with big tech players such as Amazon, Google, Microsoft, and Apple, it's not without its problems. It doesn't necessarily beat the traditional keyboard and, frankly, sometimes you just feel foolish talking aloud to your devices. Some of the main issues lie with the often frustrating failure state, difficulty distinguishing individual voices, lack of multitasking capacities, and minimal security measures.\n\nDespite all this, there are undeniably some fantastic features. The music application is simplistically brilliant: being able to select, play, pause, and skip songs through voice commands is convenience at its finest. The 'always-on' concept, while somewhat unnerving, is a fantastic feature. No more boot-up or log-in times, Alexa is always ready to deliver. The speech detection is impressive; even with multiple voices or across rooms, Alexa rarely misses out. Answering general knowledge and trivia questions also forms part of Alexa's useful features, though this is often overshadowed by the music features. Amazon continues to strive to refine its development outreach programme, build its 'skills' ecosystem, and enhance user experience. Down the line perhaps more of us will be saying - Alexa, play some music.",
        "similarities": [
            {
                "relativePath": "2021-09-27-podcasting-equipment",
                "permalink": "/podcasting-equipment/",
                "date": "2021-09-27",
                "tags": [
                    "articles",
                    "featured"
                ],
                "categories": [
                    "podcasting"
                ],
                "title": "Podcasting: what gear do you need?",
                "excerpt": "To record a good podcast you need three essential pieces of equipment and a little bit of skill.",
                "summary": [
                    "\"This is similar to what you've just read because it dives further into the importance and applications of voice and audio technology, but this time from the perspective of creating a professional-grade podcast.\""
                ],
                "score": 0.4958971961084577
            },
            {
                "relativePath": "2017-05-29-podcasts-recommended-listening",
                "permalink": "/podcasts-recommended-listening/",
                "date": "2017-05-29",
                "tags": [
                    "articles"
                ],
                "categories": [
                    "podcasting"
                ],
                "title": "Recommended Listening: my favourite podcasts",
                "excerpt": "Without any constraints of format or time, the best podcasts get to dive deep into topics that wouldn't otherwise get covered.",
                "summary": [
                    "This is similar to what you've just read because it also focuses on technology and media, specifically discussing various tech-related podcasts, which could further enrich a reader's understanding of topics like voice-controlled interfaces and the tech industry."
                ],
                "score": 0.4776687104626059
            }
        ]
    },
    "2017-04-19-comic-sans-april-fool-disaster": {
        "relativePath": "2017-04-19-comic-sans-april-fool-disaster",
        "hash": "e59ed7fa11456dd7fe65134dada2c1c7a3c3af7431b69e9164502044493f3680",
        "summary": "In an experimental April Fool's Day prank, I, a mature typographer, changed all the text on my website to the Comic Sans font. The decision, conceived as a way to embrace my acceptance of the much-maligned typeface, was executed quite easily through a couple lines of code in my pre-compiled SASS stylesheets.\n\nDespite its reputation, the introduction of Comic Sans didn't significantly disrupt the functionality or visual appeal of my site. However, my prank ran into a surprising hiccup. It turns out that for visitors to my site to actually SEE Comic Sans, they must have it installed on their devices. This wasn't an issue for most, but Apple, being too \"design-sensitive,\" does not bundle Comic Sans with its mobile operating system.\n\nSo, while my prank wasn't the resounding success I hoped for, it did illuminate a lesson in typography. That is, while a \"good design\" should indeed be flexible enough to work with any typeface, typeface itself sets the tone for content. Particularly for sites like mine, dominated by text, font choice can have a massive impact. The perception of Comic Sans, then, is not just an aesthetic problem but an issue of tonal appropriateness.",
        "similarities": [
            {
                "relativePath": "2017-02-26-inline-svg-icon-sprites",
                "permalink": "/inline-svg-icon-sprites/",
                "date": "2017-02-26",
                "tags": "articles",
                "categories": [
                    "code"
                ],
                "title": "Inline SVG icon sprites are (still) not scary.",
                "excerpt": "One of the best things about HTML is that it just works. As with much of the web, things only get weird when designers and developers start adding things.",
                "summary": [
                    "\"This is similar to what you've just read because it analyzes another aspect of web design, this time focusing on SVG icon sprites - just as the initial post talked about integrating a typeface into a website, this post discusses integrating vector-based images, which should be valuable to readers interested in more facets of website formatting and design.\""
                ],
                "score": 0.5899056856056712
            },
            {
                "relativePath": "2020-11-19-dark-mode",
                "permalink": "/dark-mode/",
                "date": "2020-11-19",
                "tags": [
                    "articles",
                    "featured"
                ],
                "categories": [
                    "code"
                ],
                "title": "Dark mode: hard mode",
                "excerpt": "Implementing dark mode with CSS custom properties, SASS, and JavaScript",
                "summary": [
                    "This is similar to what you've just read because it offers another instance of web design experimentation, this time focusing on implementing a dynamic dark mode feature, and discusses the coding challenges encountered and strategies used to overcome them."
                ],
                "score": 0.5734730467365141
            }
        ]
    },
    "2017-04-30-picobel-js-css-audio-player": {
        "relativePath": "2017-04-30-picobel-js-css-audio-player",
        "hash": "bf50e676cf4d138f8bf504d9a28f7c95dc861ac140e253222a38a2bef6fcbad1",
        "summary": "I'm excited to introduce Picobel.js (pronounced peek-o-bell, as in decibel), a lightweight, dependency-free Javascript tool poised to make HTML `audio` tags more stylish. This open-source project is readily available, with a dash of added flair from my own style experiences. Picobel was born from a challenge - I needed a way to sidestep the limitations of the regular HTML5 audio player while working on a music-review blog. Once run, Picobel simply replaces any audio elements on a page with regular markup - `div`s, `spans`, and the likes. To mix things up, I've also added optional 'themes' to the package - you can choose a pre-set style if you're not a fan of CSS trickery.\n\nEntering the open-source arena with Picobel has been quite the journey. I've prioritised ease of use in designing this package, uncoupled from the constraints of my personal workflow, making it accessible to all. A comprehensive documentation of my process is available for users - there's no need to dissect my brain anymore. The project's Github page includes an open source license (the MIT one, currently), and the README holds a widget displaying the current build status. Try out Picobel and hit me up with feedback - I'm currently polishing a few edges and making some tweaks to edge-cases and failure states. If things go as planned, I'll be launching version one of Picobel. If you have a minute to spare, I'd love to hear your thoughts on making Picobel better. Thank you in advance!",
        "similarities": [
            {
                "relativePath": "2020-12-30-web-audio-delay",
                "permalink": "/web-audio-delay/",
                "date": "2020-12-30",
                "tags": [
                    "articles",
                    "featured",
                    "intro"
                ],
                "categories": [
                    "audio",
                    "code"
                ],
                "title": "Building a delay effect with the Web Audio API",
                "excerpt": "An introduction to the power of JavaScript's Web Audio API",
                "summary": [
                    "This is similar to what you've just read because it also focuses on utilizing Javascript to manipulate and enhance audio elements in a webpage, potentially providing further inspiration or techniques for those interested in Picobel.js and web audio manipulation."
                ],
                "score": 0.5725802502879118
            },
            {
                "relativePath": "2020-11-19-dark-mode",
                "permalink": "/dark-mode/",
                "date": "2020-11-19",
                "tags": [
                    "articles",
                    "featured"
                ],
                "categories": [
                    "code"
                ],
                "title": "Dark mode: hard mode",
                "excerpt": "Implementing dark mode with CSS custom properties, SASS, and JavaScript",
                "summary": [
                    "This is similar to what you've just read because both posts share insights into web development techniques; if you enjoyed learning about the creation of a customizable audio player in the first post, you might appreciate the journey of implementing a 'live-switching' dark mode feature in the second one."
                ],
                "score": 0.5521155408022783
            }
        ]
    },
    "2017-05-29-podcasts-recommended-listening": {
        "relativePath": "2017-05-29-podcasts-recommended-listening",
        "hash": "8ef5da672e6452fc90d44454f6b19abc012c1b35a411889341952a6284da2855",
        "summary": "If you're an avid podcast listener like me, ranging from those made by Gimlet Media and NPR, there are a few podcasts that I would highly recommend. I have a keen interest in Tech Podcasts as a developer, such as 'ShopTalk Show' which answers listener questions about front-end web development. I also recommend 'CodePen Radio' which provides a behind the scenes look at what it's like to run a tech startup. For Silicon Valley buffs, 'a16z' offers discussions on the hot tech topics of the day.\n\nIf you harbour a secret itch of entrepreneurship, I recommend a few podcasts to satisfy your startup dreams. 'Startup' by Gimlet Media is an exhilarating series about what it's like to start a business. Tim Ferriss' approach to life in 'The Tim Ferriss Show' opens up a new perspective to interviews - where he gets more out of his guests than most. 'Boagworld' on the other hand provides an insight into the mechanics of running a web business, a must listen for anyone interested in the subject.\n\nFor general interest, a few podcasts garner my attention. 'Reply All' has a diverse subject matter that always catches my interest. 'More or Less', just like Planet Money, gives an irreverent outlook in unpicking topical issues. To top it off, 'Song Exploder' throws light on the geeky behind-the-scenes working of specific songs, perfect for any music lover. In case you are still thirsty for more intellectual stimulation, 'In Our Time' by the BBC is a fantastic resource with three experts giving an explanation about a different topic every time.\n",
        "similarities": [
            {
                "relativePath": "2021-09-27-podcasting-equipment",
                "permalink": "/podcasting-equipment/",
                "date": "2021-09-27",
                "tags": [
                    "articles",
                    "featured"
                ],
                "categories": [
                    "podcasting"
                ],
                "title": "Podcasting: what gear do you need?",
                "excerpt": "To record a good podcast you need three essential pieces of equipment and a little bit of skill.",
                "summary": [
                    "This is similar to what you've just read because the second post provides practical advice on starting a podcast, something you may find helpful if you enjoy listening to podcasts and are considering starting your own, as discussed in the first post."
                ],
                "score": 0.6599131682108252
            },
            {
                "relativePath": "2021-01-17-adding-rss",
                "permalink": "/adding-rss/",
                "date": "2021-01-17",
                "tags": [
                    "articles"
                ],
                "categories": [
                    "code"
                ],
                "title": "RSS in 2021 (yes, it's still a thing)",
                "excerpt": "Adding an RSS feed to an Eleventy site is (mostly) easy peasy.",
                "summary": [
                    "This is similar to what you've just read because both posts have a technical aspect, revolving around podcasting and RSS technology, so if you're intrigued by the technology behind podcast consumption, implementing an RSS feed can uncover insights into decentralized information distribution."
                ],
                "score": 0.599152050416617
            }
        ]
    },
    "2020-01-07-eleventy-static-site-generator": {
        "relativePath": "2020-01-07-eleventy-static-site-generator",
        "hash": "620992fe1a992a30c8d7c3b4f6599431bcba5e9fa7266fc9462610773f83c01c",
        "summary": "As a self-confessed static site generator (SSG) fanatic, I've had plenty of time to play around with some of the big players in the industry to figure out which one rubs me the right way. Having been a WordPress ninja for years, I can say from experience that while it's a powerful tool, it didn’t align with my idea of a perfect workflow. Next, I tried my luck with vanilla HTML, followed by Jekyll. The latter, with its comprehensible flat files and no-nonsense markdown support was a breath of fresh air, despite its lack of flexibility and compatibility with my workflow automation.\n\nDriven by an instinct to mesh my newfound love for React with SSGs, I dabbled with Gatsby next. Although its image-handling capabilities and page prerendering were impressive, wrestling with GraphQL ultimately made me retreat. Hugo, on the other hand, struck me as similar to Jekyll in terms of its benefits and limitations, with a possible edge given its compatibility with GoLang.\n\nAfter a lengthy exploration of the SSG landscape, it was [Eleventy](https://www.11ty.dev/) that finally won me over. This SSG essentially addresses all the concerns I had with its predecessors, offers immense customisation, and gloriously permits markdown to reign supreme - all within the familiar environs of JavaScript. The real cherry on the top is its simple, intuitive folder structure, and its seamless integration with my existing workflow automation. Although I had to grapple with issues regarding pagination and post type simulations, the ability to contribute to the ongoing work of the project was enticing. Having used 11ty for over a year, I'd say it's a pretty tough act to follow, although the SSG field is wide open, and I'm eager to keep experimenting.",
        "similarities": [
            {
                "relativePath": "2021-01-17-adding-rss",
                "permalink": "/adding-rss/",
                "date": "2021-01-17",
                "tags": [
                    "articles"
                ],
                "categories": [
                    "code"
                ],
                "title": "RSS in 2021 (yes, it's still a thing)",
                "excerpt": "Adding an RSS feed to an Eleventy site is (mostly) easy peasy.",
                "summary": [
                    "This is similar to what you've just read because it also discusses the implementation of functionalities using Eleventy, which the author of the first post uses and advocates for, potentially showing more uses for this static site generator."
                ],
                "score": 0.6243422270266994
            },
            {
                "relativePath": "2023-06-01-client-side-search",
                "permalink": "/client-side-search-static-site/",
                "date": "2023-05-31",
                "tags": "articles",
                "categories": [
                    "code"
                ],
                "title": "Adding client side search to a static site",
                "excerpt": "Creating a site-search function that doesn't rely on external services",
                "summary": [
                    "\"This is similar to what you've just read because it involves the use of JavaScript, specifically through Fuse.js for client-side search functionality, much like how the first blog post talks about using the JavaScript-based static site generator, Eleventy, indicating a focus on enhancing website performances and user experiences.\""
                ],
                "score": 0.5994032144392553
            }
        ]
    },
    "2020-02-17-twitter-cards-with-nunjucks-and-eleventy": {
        "relativePath": "2020-02-17-twitter-cards-with-nunjucks-and-eleventy",
        "hash": "2279057761049689b206f29dbfea7b34a1eaf6b204b78c9cd34d9578a5d05163",
        "summary": "Sharing links on Twitter can enhance user engagement, and Twitter cards can make those links even more attractive. Essentially, Twitter Cards convert your simple text links into rich cards that contain images and structured title and description data. Different types of cards including Summary, Player, and Summary with Large Image can be used, depending upon the requirement and context.\n\nTwitter cards aren't activated simply by sharing a link, rather, they require the linked page to contain Twitter-specific metadata in its head. Adding this metadata to your site can be managed effectively using Nunjucks templates and Eleventy, a static site generator. However, some caveats to successfully implementing Twitter cards include ensuring images load correctly. Fortunately, Twitter offers a Card Validator for testing. Despite this tool, it's important to note that testing needs a valid real-world URL, not a localhost URL often used for testing and development purposes. Managing these requirements can be a bit challenging, but the enhanced user engagement achieved through the use of Twitter Cards make it worthwhile.",
        "similarities": [
            {
                "relativePath": "2021-01-17-adding-rss",
                "permalink": "/adding-rss/",
                "date": "2021-01-17",
                "tags": [
                    "articles"
                ],
                "categories": [
                    "code"
                ],
                "title": "RSS in 2021 (yes, it's still a thing)",
                "excerpt": "Adding an RSS feed to an Eleventy site is (mostly) easy peasy.",
                "summary": [
                    "This is similar to what you've just read because both posts detail the process of enhancing online content accessibility through different methods, using the same tool, Eleventy, a static site generator, for implementation."
                ],
                "score": 0.6159490738851601
            },
            {
                "relativePath": "2020-01-07-eleventy-static-site-generator",
                "permalink": "/eleventy-static-site-generator/",
                "date": "2020-01-07",
                "tags": [
                    "articles",
                    "featured",
                    "popular"
                ],
                "categories": [
                    "code"
                ],
                "title": "Static site generators: Hugo vs Jekyll vs Gatsby vs 11ty",
                "excerpt": "I have an obsession with SSGs, and Eleventy is my favourite (even better than Hugo, Jekyll, and Gatsby).",
                "summary": [
                    "This is similar to what you've just read because it delves deeper into the functionalities and benefits of Eleventy, a static site generator that was also highlighted in the previous post for enhancing Twitter card management."
                ],
                "score": 0.5571556418268101
            }
        ]
    },
    "2020-04-09-css-naked-day": {
        "relativePath": "2020-04-09-css-naked-day",
        "hash": "1b0a464c657f2b52ce86d7ec6411dc8ef35ef92baf1b765d818aca8dee4396e3",
        "summary": "Today, April 9th, we're baring all and celebrating _CSS Naked Day_, the annual event that shines a spotlight on the importance of clean and semantic markup in web development. You may have noticed I'm ignoring style in favor of functionality today - if you're visiting on the 9th, you'll see my entire site is free of CSS! But apart from being a fun change of pace, this day serves a crucial purpose. \n\nNumerous people experience the web primarily through markup; whether they're using assistive tech like screen readers or automated delivery mechanisms like web-scrappers and RSS feeds. Thus, the way developers structure documents genuinely matters. So while HTML may not need (much) styling to be functional, as I've previously written about, it's essential to appreciate the days when we strip it back to its bare bones to truly appreciate the markup language in all its glory.",
        "similarities": [
            {
                "relativePath": "2017-04-19-comic-sans-april-fool-disaster",
                "permalink": "/comic-sans-april-fool-disaster/",
                "date": "2017-04-19",
                "tags": "articles",
                "categories": [
                    "typography"
                ],
                "title": "I changed my site's font to Comic Sans as an April Fool. It was a disaster.",
                "excerpt": "I often hear that \"good design\" works in all situations, no matter what typeface you wrap it in. The reality is a little more nuanced.",
                "summary": [
                    "This is similar to what you've just read because both posts explore the role of different web styling elements - CSS and typography - and their impact on user experience, from an instructional and perspective-based angle."
                ],
                "score": 0.5476736889105265
            },
            {
                "relativePath": "2020-11-19-dark-mode",
                "permalink": "/dark-mode/",
                "date": "2020-11-19",
                "tags": [
                    "articles",
                    "featured"
                ],
                "categories": [
                    "code"
                ],
                "title": "Dark mode: hard mode",
                "excerpt": "Implementing dark mode with CSS custom properties, SASS, and JavaScript",
                "summary": [
                    "This is similar to what you've just read because it continues the exploration of website design and functionality with a focus on CSS, this time through the lens of implementing dynamic themes and modes using CSS custom properties and JavaScript."
                ],
                "score": 0.5291945646139171
            }
        ]
    },
    "2020-11-19-dark-mode": {
        "relativePath": "2020-11-19-dark-mode",
        "hash": "a00490cdff92338a098c62bcdc8956871220e8de0ce683c73bc973b50c140fd0",
        "summary": "After witnessing my brother implement dark mode on his blog, it sparked a sibling rivalry and I knew I had to implement dark mode on my own site, but with a twist. This blog post takes you through the journey of how I used CSS custom properties, SASS and JavaScript to create a \"live-switching\" effect in my website's dark mode feature. I started with the basics, using the `prefers-color-scheme` media query to apply the dark mode setting. \n\nNext, I outlined how dynamic themes could be defined with CSS custom properties to alleviate issues such as unnecessary complexity and maintainability that come with using `@media` rules and sass variables. I ran into some issues when trying to use the custom properties inside Sass functions, but I was able to find workarounds. \n\nThe real twist was the implementation of \"live-switching.\" With a little bit of JavaScript and a user interface toggle button, users could switch themes on-the-fly without changing a system-wide preference. This \"live-switching\" respects the system’s default theme setting, but the user's preference overrides the system preference and also persists between page loads. This was my secret weapon to outdo my brother's blog design! A working demo of this feature can be viewed on my blog site, with the toggle located in the top-right corner of the screen.",
        "similarities": [
            {
                "relativePath": "2017-02-15-svg-markup",
                "permalink": "/svg-markup/",
                "date": "2017-02-15",
                "tags": [
                    "articles",
                    "popular"
                ],
                "categories": [
                    "code"
                ],
                "title": "Getting to grips with SVG markup",
                "excerpt": "SVGs are complex, for sure, but that very complexity gives them their power. And we don't need to know the intricacies of the co-ordinate system to harness that power.",
                "summary": [
                    "This is similar to what you've just read because it also involves techniques on improving website design and user experience, focusing on SVGs rather than dark mode, and explores how CSS and HTML could be used to create more interactive and responsive website elements."
                ],
                "score": 0.6326788393982188
            },
            {
                "relativePath": "2017-02-26-inline-svg-icon-sprites",
                "permalink": "/inline-svg-icon-sprites/",
                "date": "2017-02-26",
                "tags": "articles",
                "categories": [
                    "code"
                ],
                "title": "Inline SVG icon sprites are (still) not scary.",
                "excerpt": "One of the best things about HTML is that it just works. As with much of the web, things only get weird when designers and developers start adding things.",
                "summary": [
                    "\"This is similar to what you've just read because both blog posts dive into the technical aspects of optimizing website design and implementation, with the first using CSS and JavaScript for a live-switching dark mode feature, and the second focusing on optimal use of SVG icon sprites for a high-performance web entity.\""
                ],
                "score": 0.6176235832897511
            }
        ]
    },
    "2020-12-30-web-audio-delay": {
        "relativePath": "2020-12-30-web-audio-delay",
        "hash": "c38a5d10628c4e259b84f6013eb371ff3fc8b0225a4c9161365be07d5e20fd8c",
        "summary": "In this post, I guide you through building a delay effect using JavaScript's Web Audio API, replicating the functionality of a delay pedal often used with a guitar. We start by setting up an audio context, our gateway into the browser's audio capabilities, and then establish an analogue signal path, something akin to a how a band sets up on stage, from instrument to speaker.\n\nWe then detail each cog in the signal path, starting with the destination and walking all the way back to the oscillator, or the instrument. Using JavaScript, we implement these components and test them. After demonstrating how to create a steady tone, we move on to crafting a pulse - a note that starts and stops at specified times. \n\nTo take it further, we control the amplitude or \"volume\" of our pulse with a gain node and introduce a random element to vary the pitch of the note. We then add complexity by mirroring this setup to create a second note in conjunction with the first, copying and transposing it to deliver a fuller sound. \n\nFinally, we inject an effects unit into this setup to drive the delay effect, by diverting part of the signal to it and adding it back to the original sound. An important piece to building this was using the feedback mechanism, which involves taking part of the delayed signal and feeding it back into the delay. We control the length and strength of the repetition using the delay duration and feedback level, giving us the power to customize the full effect. \n\nLastly, I make it interactive and plug the crucial factors of duration and feedback into some HTML range elements, allowing for on-the-fly tweaking. This merely scratches the surface of the expansive opportunities the audio context holds and I hope this ignites your creativity to experiment using these tools. Reached a unique and crazy audio context? I'd love to hear about it!",
        "similarities": [
            {
                "relativePath": "2021-07-21-line-graphs-with-react-svg-d3",
                "permalink": "/line-graphs-with-react-svg-d3/",
                "date": "2021-07-21",
                "tags": [
                    "articles",
                    "featured",
                    "intro"
                ],
                "categories": [
                    "audio",
                    "code"
                ],
                "title": "Line graphs with React and D3.js",
                "excerpt": "Generating a dynamic SVG visualisation of audio frequency data.",
                "summary": [
                    "This is similar to what you've just read because the second post, like the first, combines coding with creative elements and involves dynamically adjusting elements on the screen, with a focus this time on the visual elements and data representation, rather than audio."
                ],
                "score": 0.7411046702443735
            },
            {
                "relativePath": "2017-03-22-what-is-a-decibel-anyway",
                "permalink": "/what-is-a-decibel-anyway/",
                "date": "2017-03-22",
                "tags": [
                    "articles",
                    "featured",
                    "popular"
                ],
                "categories": [
                    "audio"
                ],
                "title": "What is a decibel, anyway?",
                "excerpt": "The decibel has always confused me. I did some research, and it turns out the decibel is actually pretty interesting.",
                "summary": [
                    "This is similar to what you've just read because it continues the exploration of audio and sound technologies, diving into the intricacies of decibels, their application in various fields, and their critical role in volume, gain-staging and clipping, concepts you have encountered while creating your JavaScript-based delay effect."
                ],
                "score": 0.69394383626566
            }
        ]
    },
    "2021-01-17-adding-rss": {
        "relativePath": "2021-01-17-adding-rss",
        "hash": "dc06135a5e8d15a6076aafb065438d45c3a84752610815ccf2986469a52318f7",
        "summary": "This post discusses the author's love of RSS (Really Simple Syndication) technology and how they implemented an RSS feed on their blog. The author – a self-proclaimed RSS fanboy and podcast enthusiast – emphasizes the decentralized distribution potential of RSS and its direct content delivery benefits. They especially admire RSS's role in supporting podcasts and its ad-free, algorithm-free distribution mechanism. \n\nHowever, the author hadn't implemented an RSS feed on their own blog until now. This oversight was rectified with the aid of Eleventy, a static site generator. The author takes readers through the technical process, starting with creating an XML feed page. This page essentially acts as an XML-coded RSS feed that combines existing blog content in an RSS-friendly package. Some content on the blog doesn't translate well to an RSS platform, though, challenges the author circumvents by using a `not_rss_friendly` flag. \n\nThe author conducted tests for the feed locally, handled any discrepancies, and validated the feed through Netlify's Deploy Previews. In the end, the new RSS feed was launched successfully. The full template file for the `feed.md` used is also included in the post. This guide offers a valuable resource for anyone looking to make their online content accessible via RSS.",
        "similarities": [
            {
                "relativePath": "2023-10-27-llm-related-posts",
                "permalink": "/llm-related-posts",
                "date": "2023-10-27",
                "tags": [
                    "articles"
                ],
                "categories": [
                    "code"
                ],
                "title": "TomBot2000: automatically generating related posts using LLMs",
                "excerpt": "How I used LLM embeddings and GPT4 to generate related posts for my blog.",
                "summary": [
                    "This is similar to what you've just read because it also explores technical solutions for content distribution on a blog, but focuses on employing large language model technology for automatically identifying and linking related posts."
                ],
                "score": 0.6801805597635785
            },
            {
                "relativePath": "2023-06-01-client-side-search",
                "permalink": "/client-side-search-static-site/",
                "date": "2023-05-31",
                "tags": "articles",
                "categories": [
                    "code"
                ],
                "title": "Adding client side search to a static site",
                "excerpt": "Creating a site-search function that doesn't rely on external services",
                "summary": [
                    "This is similar to what you've just read because the second post follows the same theme of the author enhancing their blog's user experience (through adding a client-side search function), showcasing their practical approach by discussing the technicalities and implementation process, and sharing their insights of the technology used, like the first post did with the RSS feed."
                ],
                "score": 0.6673243790135702
            }
        ]
    },
    "2021-07-21-line-graphs-with-react-svg-d3": {
        "relativePath": "2021-07-21-line-graphs-with-react-svg-d3",
        "hash": "60d07b6e16f4dde8160dca9205bb1b8b308eab1d46f9f5761a89aae4f5f1bc06",
        "summary": "In this blog post, we walk through creating dynamic line graphs with React and D3.js. This demonstration uses SVG for a simple and instinctive way to draw graph lines and React's virtual DOM for efficient re-rendering of the graphs when data changes. D3.js is enlisted for its exceptional data manipulation abilities, especially its mapping of data into a layout-friendly domain and the creation of the main part of the graph itself.\n\nThe main steps of the process are outlined, including basic data conversion into an SVG path, making the graph dynamic, and understanding why the graphs may look different from the original demo. Using React and D3.js's line generator and linear scale calculator, combined with a simple implementation of SVG, adds a touch of D3.js to make things easier without getting too caught up in its intricacies. By tackling smaller pieces and using comfortable tools, you can take these core concepts and apply them to create unique visualizations in your own work, without getting overwhelmed or losing the versatility that these tools provide.",
        "similarities": [
            {
                "relativePath": "2020-12-30-web-audio-delay",
                "permalink": "/web-audio-delay/",
                "date": "2020-12-30",
                "tags": [
                    "articles",
                    "featured",
                    "intro"
                ],
                "categories": [
                    "audio",
                    "code"
                ],
                "title": "Building a delay effect with the Web Audio API",
                "excerpt": "An introduction to the power of JavaScript's Web Audio API",
                "summary": [
                    "This is similar to what you've just read because it also involves applying JavaScript to manipulate a different type of digital content - audio - by guiding you through the foundational knowledge and practical skills, much like the first post walked through creating dynamic line graphs using React and D3.js."
                ],
                "score": 0.7411046702443735
            },
            {
                "relativePath": "2023-09-30-improving-svg-chart-interactivity-with-voronoi-diagrams",
                "permalink": "/improving-svg-chart-interactivity-with-voronoi-diagrams/",
                "date": "2023-09-30",
                "tags": [
                    "articles",
                    "intro"
                ],
                "categories": [
                    "code"
                ],
                "title": "Improving SVG chart interactivity with Voronoi diagrams",
                "excerpt": "How I used Delaunay triangulation and Voronoi diagrams to fix hover issues in my SVG charts (with React and D3.js).",
                "summary": [
                    "\"This is similar to what you've just read because it continues the theme of improving your data visualization in React and D3.js, this time focusing on better interaction with SVG charts using concepts such as Delaunay triangulation, Voronoi diagrams, and enhanced hitbox targeting.\""
                ],
                "score": 0.737626161233907
            }
        ]
    },
    "2021-09-27-podcasting-equipment": {
        "relativePath": "2021-09-27-podcasting-equipment",
        "hash": "eecc890cc1b09be0d2147c743c5ee06fb04d9c69b073e139e65a8ad3769aab52",
        "summary": "In launching a new podcast, it can sometimes get overwhelming, but with the right gear and skills, you can certainly achieve quality content. So, what exactly do you need to start a podcast? First, you need to invest in a good microphone. While you can technically record a podcast with anything, the audio quality sets professional podcasts apart from amateur ones. There are three kinds of microphones suitable for podcasting: dynamic mics, condenser mics, and lavalier mics. Each has its own strengths and weaknesses, but all would give you decent recording quality.\n\nSecond, you need to ensure a reliable connection between your mic and your computer, which usually includes an \"audio interface.\" Some podcast-focused mics can directly connect to your computer via USB, eliminating the need for an audio interface. You also need to consider the microphone stand, where boom arms provide excellent flexibility. Some mics may require additional peripherals, but many setups would be fine with just the basics.\n\nLastly, you'll need an audio software. If you're editing the podcast, a full Digital Audio Workstation (DAW) is your best friend. For hosts or guests, any simple audio-capture software would do. Always remember, no matter how expensive or high-tech your equipment are, using them incorrectly renders them moot. Pay attention to your recording environment, use headphones, keep your mouth as close to the mic as possible, and avoid recording in noisy and echo-y places. In podcasting, actual content creation, marketing, and hosting considerations are also equally crucial, but possessing the right equipment is a vital first step to creating engaging and professional-sounding podcasts.",
        "similarities": [
            {
                "relativePath": "2017-05-29-podcasts-recommended-listening",
                "permalink": "/podcasts-recommended-listening/",
                "date": "2017-05-29",
                "tags": [
                    "articles"
                ],
                "categories": [
                    "podcasting"
                ],
                "title": "Recommended Listening: my favourite podcasts",
                "excerpt": "Without any constraints of format or time, the best podcasts get to dive deep into topics that wouldn't otherwise get covered.",
                "summary": [
                    "This is similar to what you've just read because it provides recommendations on specific podcasts to listen to, thus complementing the first blog's tips on how to start creating your own podcast."
                ],
                "score": 0.6599131682108252
            },
            {
                "relativePath": "2021-01-17-adding-rss",
                "permalink": "/adding-rss/",
                "date": "2021-01-17",
                "tags": [
                    "articles"
                ],
                "categories": [
                    "code"
                ],
                "title": "RSS in 2021 (yes, it's still a thing)",
                "excerpt": "Adding an RSS feed to an Eleventy site is (mostly) easy peasy.",
                "summary": [
                    "This is similar to what you've just read because it delves into the technical details of putting up an RSS feed for a blog, similar to the first post that discusses the technicalities of setting up podcast equipment, and may be particularly relevant if you're considering distributing your podcast via RSS."
                ],
                "score": 0.5650250722824597
            }
        ]
    },
    "2022-02-25-wordle-node-script": {
        "relativePath": "2022-02-25-wordle-node-script",
        "hash": "babd99a6e0fb83b7cffad9c186945f6768c6e31844bf2aaf063307852ed29fea",
        "summary": "In the post, I share my technique for improving my Wordle game with the help of simple node scripts. These scripts perform various operations with the Wordle's 12,972-word dictionary to optimize my opening sequence of guesses. The strategies I use include reducing the use of vowels in early guesses, identifying the most common letters, and using a comprehensive dictionary of words to choose from.\n\nMy scripts, written in JavaScript, analyse the Wordle dictionary to find the frequency of each letter, sort these frequencies, and calculate their relative occurrences, allowing me to focus on the letters that appear most frequently. I then use these scripts to run through potential opening guesses, focusing on words that contain the most frequent letters but don't repeat them - a type of word known as an \"isogram\".\n\nThis process allows me to filter the dictionary down to a shortlist of potential opening words. While it took some time and scripting knowledge to develop this approach, it simultaneously provided a fun word game and has improved my Wordle strategy. Plus, it shows how you can use scripting to automate and simplify complex, data-heavy tasks in more serious contexts too. So here's a reminder, next time you're faced with a time-consuming, monotonous task, maybe consider burning a few days writing a script to automate it instead!",
        "similarities": [
            {
                "relativePath": "2023-10-27-llm-related-posts",
                "permalink": "/llm-related-posts",
                "date": "2023-10-27",
                "tags": [
                    "articles"
                ],
                "categories": [
                    "code"
                ],
                "title": "TomBot2000: automatically generating related posts using LLMs",
                "excerpt": "How I used LLM embeddings and GPT4 to generate related posts for my blog.",
                "summary": [
                    "\"This is similar to what you've just read because it continues the theme of using scripts to streamline complex tasks, this time detailing how I've used embeddings from Large Language Model technology to create a more efficient and accurate system for recommending related posts on my blog.\""
                ],
                "score": 0.719982007380882
            },
            {
                "relativePath": "2023-06-01-client-side-search",
                "permalink": "/client-side-search-static-site/",
                "date": "2023-05-31",
                "tags": "articles",
                "categories": [
                    "code"
                ],
                "title": "Adding client side search to a static site",
                "excerpt": "Creating a site-search function that doesn't rely on external services",
                "summary": [
                    "This is similar to what you've just read because it explains another practical use of JavaScript in automating tasks, this time for client-side search functions on a static site, offering a different perspective on problem-solving with scripting."
                ],
                "score": 0.6176673568372815
            }
        ]
    },
    "2022-10-24-oblique-strategies-via-npx": {
        "relativePath": "2022-10-24-oblique-strategies-via-npx",
        "hash": "ce78186f0381c328abf0cc88d44ec620d6019c85d51a482f9e7b16381049a129",
        "summary": "In 1975, Brian Eno and Peter Schmidt launched Oblique Strategies, a set of over 100 cards each offering unique dilemma solutions to assist in creative situations. With the help of a quick command, you can now sample a piece of Eno's creative inspiration directly in your terminal using npx oblique-strategy. \n\nLooking to learn more about the npx process and understanding package.bin better, I created a script with the npm package (code accessible on my GitHub profile). Although admittedly stepping on copyright boundaries, the final product provides a taste of the Oblique Strategies straight to your terminal. Should any objection arise, I'll remove this repo promptly. But for now, let's enjoy and draw inspiration from these worthwhile dilemmas turned creative solutions. Like the time Eno stirred creativity by simply suggesting to fill every beat with something in one of his Oblique Strategies.",
        "similarities": [
            {
                "relativePath": "2022-02-25-wordle-node-script",
                "permalink": "/wordle-node-script/",
                "date": "2022-02-25",
                "tags": [
                    "articles",
                    "featured"
                ],
                "categories": [
                    "code"
                ],
                "title": "Improving my Wordle opening words using simple node scripts",
                "excerpt": "Crafting command-line scripts to calculate the most frequently used letters in Wordle (and finding an optimal sequence of starting words).",
                "summary": [
                    "\"This is similar to what you've just read because both blog posts discuss the use of script creation and JavaScript to enhance or optimise a non-technical process, whether it's for injecting creative inspiration using npx oblique-strategy or improving your Wordle strategy with data analysis.\""
                ],
                "score": 0.556937626548599
            },
            {
                "relativePath": "2023-10-27-llm-related-posts",
                "permalink": "/llm-related-posts",
                "date": "2023-10-27",
                "tags": [
                    "articles"
                ],
                "categories": [
                    "code"
                ],
                "title": "TomBot2000: automatically generating related posts using LLMs",
                "excerpt": "How I used LLM embeddings and GPT4 to generate related posts for my blog.",
                "summary": [
                    "This is similar to what you've just read because both posts are about using coded scripts to automate a task, in this case, generating related content for a blog, which could be appealing if you're interested in learning more about innovative uses of programming for content management and curation."
                ],
                "score": 0.46757954559451653
            }
        ]
    },
    "2023-06-01-client-side-search": {
        "relativePath": "2023-06-01-client-side-search",
        "hash": "f77d5f6d25d35bcf75cf1e41760a74041fc2156b152ee34a95b846a901c6806e",
        "summary": "This blog post discusses the process of adding a client-side search function to a static site, all without relying on third-party services. This function significantly boosts user experience by offering readers a quick method of navigating and specifically locating content, which in turn keeps them engaged and motivated to explore more. \n\nThe post reviews \"server-side\" and \"client-side\" search options, explaining the pros and cons of each. The author firmly believes client-side search to be more suitable for individual site needs, despite possible trade-offs. The reasons given were mainly based on cost control, customizability, and “fun” or enjoyment in the process of learning and setting up the search function.\n\nOn the tech front, the blog describes how client-side search functions in two steps: index creation when the site is built and query performance against that index with the help of frontend components. Creating an index at build time comes with the additional benefit of automatic regeneration whenever the site's content changes. \n\nTo perform searches, the author uses Fuse.js, a JavaScript library that offers good service in running efficient client-side search operations in the user's web browser. The author appreciates the fine-tuning potential in Fuse.js, which is instrumental in obtaining desired search results. \n\nEven though some trade-offs are made when opting for client-side over server-side search functions, the author emphasises the speed, accuracy, and ease-of-use of the search function on his site. Concluding the article, he shares the satisfaction drawn from the hands-on experience in setting the search function and learning along the way.",
        "similarities": [
            {
                "relativePath": "2023-10-27-llm-related-posts",
                "permalink": "/llm-related-posts",
                "date": "2023-10-27",
                "tags": [
                    "articles"
                ],
                "categories": [
                    "code"
                ],
                "title": "TomBot2000: automatically generating related posts using LLMs",
                "excerpt": "How I used LLM embeddings and GPT4 to generate related posts for my blog.",
                "summary": [
                    "\"This is similar to what you've just read because it continues the exploration into site search and content-generation solutions, this time focusing on a different technology, Large Language Model embeddings, which offer a new approach to generating related content, similar to the client-side search functionality discussed in the previous post.\""
                ],
                "score": 0.6868163285321814
            },
            {
                "relativePath": "2021-01-17-adding-rss",
                "permalink": "/adding-rss/",
                "date": "2021-01-17",
                "tags": [
                    "articles"
                ],
                "categories": [
                    "code"
                ],
                "title": "RSS in 2021 (yes, it's still a thing)",
                "excerpt": "Adding an RSS feed to an Eleventy site is (mostly) easy peasy.",
                "summary": [
                    "This is similar to what you've just read because it also discusses the technical process of adding a new feature to a blog, focusing on the author's personal implementation of RSS feed technology and offering insights into their problem-solving strategies, which may be inspiring for readers interested in improving user experience on their own websites."
                ],
                "score": 0.6673243790135702
            }
        ]
    },
    "2023-08-31-what-if-minesweeper-kept-getting-harder": {
        "relativePath": "2023-08-31-what-if-minesweeper-kept-getting-harder",
        "hash": "fefa9660afad436d13de21fbe4eaf00dd75f10c2e9270d60ccdd4b1822d4c2af",
        "summary": "In an inspired creation, I've developed a game over the years, an incrementally harder version of a classic - Minesweeper! As a seasoned player who's spent countless hours trying to dodge virtual mines, I sought to keep the game interesting by introducing an additional mine after every completion. Thus, in an ambitious project evolved the incrementally harder Minesweeper. Alongside boasting the traditional rules and gameplay, this novel version presents a refreshing twist to the classic game.\n\nPlaying Minesweeper involves clicking cells on a grid, uncovering either mine-free cells or accidentally stepping on a mine. A unique feature embedded in each cell is that it lets you know the number of mines adjacent to it, prompting players to make calculated moves! The game progresses through logic and deduction as you punctiliously select your next step. However, my version diverges from the traditional game in a few intriguing ways. \n\nThe first significant change is the incremental difficulty, with an additional mine showing up with every grid completion, making the successor grid a notch tougher. The board has also been constrained to a 10x10 grid to suit seamless mobile gameplay. A significant alteration is the first click guaranteeing a mine-free cell, saving the frustrating fate of immediate loss. Finally, the traditional \"flagging\" feature took a reluctant comeback in the game after demand from enthusiastic early playtesters. After a year of persistent tinkering, my high score stands at 36. How well do you think you can do? Challenge yourself and let me know!\n",
        "similarities": [
            {
                "relativePath": "2022-02-25-wordle-node-script",
                "permalink": "/wordle-node-script/",
                "date": "2022-02-25",
                "tags": [
                    "articles",
                    "featured"
                ],
                "categories": [
                    "code"
                ],
                "title": "Improving my Wordle opening words using simple node scripts",
                "excerpt": "Crafting command-line scripts to calculate the most frequently used letters in Wordle (and finding an optimal sequence of starting words).",
                "summary": [
                    "This is similar to what you've just read because it discusses utilizing logic, strategy and computational resources to enhance a familiar and classic game, Wordle, like the blog you've just read about an innovatively challenging iteration of Minesweeper."
                ],
                "score": 0.5428108991888891
            },
            {
                "relativePath": "2017-04-30-picobel-js-css-audio-player",
                "permalink": "/picobel-js-css-audio-player/",
                "date": "2017-04-30",
                "tags": "articles",
                "categories": [
                    "audio"
                ],
                "title": "Introducing Picobel.js - an audio player you can style with css",
                "excerpt": "Picobel.js is a lightweight dependency-free Javascript tool that converts html audio tags into styleable markup.",
                "summary": [
                    "This is similar to what you've just read because both posts detail the author's self-directed projects, with the second diving into the creation of an open-source audio-enhancement Javascript tool, sparking interest in those who enjoyed learning about the intricacies and challenges of developing a software project."
                ],
                "score": 0.5043699634817048
            }
        ]
    },
    "2023-09-30-improving-svg-chart-interactivity-with-voronoi-diagrams": {
        "relativePath": "2023-09-30-improving-svg-chart-interactivity-with-voronoi-diagrams",
        "hash": "0b0be610098c1136570861f0efae259247e6d71c3c819c10bb5a381e7250ff5d",
        "summary": "In this blog post, I shared my experience about how I used Delaunay triangulation and Voronoi diagrams to resolve hover issues in my SVG charts, using React and D3.js. I explained how adding hitboxes can vastly improve the user experience by helping to target points more accurately on scatter plots. Voronoi diagrams were introduced as an innovative solution to the problem, offering non-overlapping hitboxes for dense datasets. \n\nIn using D3.js, this post explained that it is an essential library for creating data visualizations in SVG. I also introduced how Delaunay and Voronoi can make SVG chart interactivity better with React and D3.js, sharing some useful pieces of code. Lastly, I summarized that SVG graphs have to carefully manage their hover interactions, and avoid relying on small elements but rather use invisible elements to extend the hitbox of the points. Voronoi diagrams were recommended as the ideal way to create enlarged, non-overlapping hitboxes, particularly when using D3.js in combination with the d3-delaunay package.",
        "similarities": [
            {
                "relativePath": "2021-07-21-line-graphs-with-react-svg-d3",
                "permalink": "/line-graphs-with-react-svg-d3/",
                "date": "2021-07-21",
                "tags": [
                    "articles",
                    "featured",
                    "intro"
                ],
                "categories": [
                    "audio",
                    "code"
                ],
                "title": "Line graphs with React and D3.js",
                "excerpt": "Generating a dynamic SVG visualisation of audio frequency data.",
                "summary": [
                    "This is similar to what you've just read because it continues on the topic of SVG graph creation with React and D3.js, focusing more on dynamic line graphs and efficient re-rendering when data changes, providing more practical uses for these libraries in data visualization."
                ],
                "score": 0.737626161233907
            },
            {
                "relativePath": "2017-02-15-svg-markup",
                "permalink": "/svg-markup/",
                "date": "2017-02-15",
                "tags": [
                    "articles",
                    "popular"
                ],
                "categories": [
                    "code"
                ],
                "title": "Getting to grips with SVG markup",
                "excerpt": "SVGs are complex, for sure, but that very complexity gives them their power. And we don't need to know the intricacies of the co-ordinate system to harness that power.",
                "summary": [
                    "This is similar to what you've just read because it delves deeper into the topic of SVGs, providing a better understanding of their function and how they can be used for complex designs, which complements the practical application shared in the first post."
                ],
                "score": 0.6710168096921717
            }
        ]
    },
    "2023-10-27-llm-related-posts": {
        "relativePath": "2023-10-27-llm-related-posts",
        "hash": "54f517a47f6b8102cb39b99932472dfd313b228d4acc72f31912622ec909191e",
        "summary": "In this blog post, I delve into my journey with embeddings, a facet of Large Language Model (LLM) technology that allows me to generate related blog content. This offshoot from LLM is the basis of tools like ChatGPT, but instead of creating hallucinatory text, it encodes the meaning of a text as an array of numbers. For my use, it sidesteps complicated algorithms by comparing two pieces of content for similarity, rendering my previous search work obsolete. This solved my long-held issue of generating related posts for my blog.\n\nDefining related posts manually or through Content Management Systems (CMS) has its downsides: the process becomes impractical and time-consuming as content grows, and links can break. An alternative would be automatic CMS selection of related posts, but this isn't viable with static sites. Using embeddings, I devised a system that identifies the similarity between posts by mapping their semantic meaning in a multidimensional space, culminating in a much more efficient and accurate recommendation engine for my readers.\n\nOf course, there were hurdles. Handling API rate and token limits, exorbitant pricing, inconsistent output, hallucination, managing node memory, and changes in post content all presented challenges. However, by leveraging caching techniques, selective regeneration of posts, and careful prompt phrasing, I was able to optimize the script for my blog workflow.\n\nThe final result: top two most related posts to a new post are calculated, compared, and then linked at the end of the post. From title extraction to the writeback of similar post data into post frontmatter, it all costs about thirty US cents per run of the complete script. I'm pretty content with the results, and though the script isn't yet available for wider use, it will be made so if there's sufficient demand.\n",
        "similarities": [
            {
                "relativePath": "2022-02-25-wordle-node-script",
                "permalink": "/wordle-node-script/",
                "date": "2022-02-25",
                "tags": [
                    "articles",
                    "featured"
                ],
                "categories": [
                    "code"
                ],
                "title": "Improving my Wordle opening words using simple node scripts",
                "excerpt": "Crafting command-line scripts to calculate the most frequently used letters in Wordle (and finding an optimal sequence of starting words).",
                "summary": [
                    "This is similar to what you've just read because it also centers around the creative usage of extraction strategies and script writing in order to optimize a process, in this case, using JavaScript scripts to improve Wordle gameplay, making the process more efficient, much like the use of embeddings to enhance content recommendations."
                ],
                "score": 0.719982007380882
            },
            {
                "relativePath": "2023-06-01-client-side-search",
                "permalink": "/client-side-search-static-site/",
                "date": "2023-05-31",
                "tags": "articles",
                "categories": [
                    "code"
                ],
                "title": "Adding client side search to a static site",
                "excerpt": "Creating a site-search function that doesn't rely on external services",
                "summary": [
                    "This is similar to what you've just read because it builds on the discussions of efficient content linking and user experience improvements by detailing the author's process and decisions in implementing a client-side search function to their static site, which may offer additional insights for those interested in enhancing blog functionality."
                ],
                "score": 0.6868163285321814
            }
        ]
    }
}